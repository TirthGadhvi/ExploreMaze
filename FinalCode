from vertex import Vertex

class Graph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        self.vertices[vertex.value] = vertex

    def add_edge(self, start_vertex, end_vertex, weight=0):
        self.vertices[start_vertex.value].add_edge(end_vertex.value, weight)
        self.vertices[end_vertex.value].add_edge(start_vertex.value, weight)

    def explore(self):
        print("Exploring the graph....\n")
        # FILL IN EXPLORE METHOD BELOW
        current_location = "entrance"
        total_cost = 0
        print(f"\nStarting off at the {current_location}\n")
        while current_location != "treasure_room":
            vertex = self.vertices[current_location]
            for adjacent_location, cost in vertex.edges.items():
                room_key = adjacent_location[0]
                print(f"Enter {room_key} for {adjacent_location}: {cost} cost")
            valid_choices = [room[:1] for room in vertex.edges.keys()]
            print(f"\nYou have accumulated: {total_cost} cost")
            choice = input("\nWhich room do you move to?")
            if choice not in valid_choices:
                print(f"Please select from these letters: {valid_choices}")
            else:
                for room in vertex.edges.keys():
                    if choice == room[0]:
                        current_location = room
                        total_cost += vertex.edges[room]
                print(f"\n*** You have chosen: {current_location} ***\n")
        print(f"Made it to the treasure room with {total_cost} cost")

    def print_map(self):
        print("\nMAZE LAYOUT\n")
        for vertex_key in self.vertices:
            print(f"{vertex_key} connected to...")
            vertex = self.vertices[vertex_key]
            for adjacent_vertex, cost in vertex.edges.items():
                print(f"=> {adjacent_vertex}: cost is {cost}")
            print("")
        print("")

def build_graph():
    graph = Graph()
    
    # CREATE VERTICES BELOW...
    entrance = Vertex("entrance")
    ante_chamber = Vertex("ante-chamber")
    kings_room = Vertex("King's room")
    grand_gallery = Vertex("grand gallery")
    treasure_room = Vertex("treasure_room")
    current_room = Vertex("entrance")
    
    # ADD VERTICES TO GRAPH BELOW...
    graph.add_vertex(entrance)
    graph.add_vertex(ante_chamber)
    graph.add_vertex(kings_room)
    graph.add_vertex(grand_gallery)
    graph.add_vertex(treasure_room)
    
    # ADD EDGES BETWEEN VERTICES BELOW...
    graph.add_edge(entrance, ante_chamber, 7)
    graph.add_edge(entrance, kings_room, 3)
    graph.add_edge(kings_room, ante_chamber, 1)
    graph.add_edge(grand_gallery, ante_chamber, 2)
    graph.add_edge(grand_gallery, kings_room, 2)
    graph.add_edge(treasure_room, ante_chamber, 6)
    graph.add_edge(treasure_room, grand_gallery, 4)
    
    # DON'T CHANGE THIS CODE
    graph.print_map()
    return graph
